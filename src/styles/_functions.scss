$fs-base-font-size: 16px !default;
$site-width-clamp: 1600px;

@function strip-unit($number) {
    @if type-of($number) == "number" and not unitless($number) {
      @return $number / ($number * 0 + 1);
    }
  
    @return $number;
}


@function fs-scale($start, $end, $min-width, $max-width) {
  @if $start > 0 and $end > 0 and unit($start) != unit($end) {
    @error 'üî¥  fs-scale() units don‚Äôt match';
  }

  $slope: ($end - $start) / ($max-width - $min-width);

  $intercept: $end - ($slope * $max-width);

  @if (fs-strip-unit($intercept) == 0) {
    @return $slope * 100vw;
  }
  @else {
    @return calc(#{$slope * 100vw} + #{fs-rem($intercept)});
  }
}

@function fs-strip-unit($arg) {
  // Return unitless value if valid number
  @if type-of($arg) == 'number' {
    @return $arg / ($arg * 0 + 1);
  }
  // Error if not a valid number
  @else {
    @error 'üî¥  fs-strip-unit(#{inspect($arg)} is not a valid number';
  }
}

@function fs-rem($values) {

  // Placeholder list for converted values
  $output: ();

  @each $val in $values {

    // Check if pixel value
    @if type-of($val) == 'number' and unit($val) == 'px' {
      // Convert to rems
      $val: ($val / $fs-base-font-size) * 1rem;
    }

    // Do nothing to all other values
    @else if $fs-debug-mode and $val != 0 {
      @warn '‚ö†Ô∏è  Can‚Äôt convert non-pixel value to rems: #{$val}';
    }

    // Append value to output list
    $output: append($output, $val);
  }

  // Return converted value(s)
  @return $output;
}